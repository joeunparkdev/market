1. 수정 및 삭제 API에서 Resource를 구분하기 위해서 어떤 방식으로 요청(Request) 하셨나요? (`param`, `query`, `body`)

2. 대표적인 HTTP Method의 4가지( `GET`, `POST`, `PUT`, `DELETE` )는 각각 어떤 상황에서 사용하였나요?
Get은 상품을 불러올때, Post는 새 상품을 생성할때, Put은 수정 그리고 Delete는 삭제 할때 사용했습니다.

3. API 설계 시 RESTful한 원칙을 따랐나요? 어떤 부분이 RESTful한 설계를 반영하였고, 어떤 부분이 그렇지 않았나요?
RESTful한 설계를 반영:

    - URI 경로 사용: 리소스를 나타내는 URI 경로가 사용되어, /products와 같이 직관적이고 명확한 경로를 사용하고 있습니다.
    - URI 파라미터 사용: 리소스 식별을 위해 URI 경로의 파라미터를 사용하고 있습니다. 예를 들어, /products:_productId와 같이 리소스 간의 관계를 표현하는 데 활용했습니다.
    (/products는 API의 주 경로이고 상품 리소스를 의미하고, :_productId:는 URI 패라미터 및 변수 이며, 특정 상품을 식별하기 위해 사용됩니다.)
    - HTTP 동사 활용: HTTP 메서드(GET, POST, PUT, DELETE)를 올바르게 사용하여 리소스를 읽기, 생성, 수정, 삭제하는 데 활용하고 있습니다.
    - 오류 처리: 오류 응답에 대한 명확한 규칙과 메시지를 정의하고, 예상되는 오류 상황에 대한 적절한 HTTP 상태 코드를 사용하여 클라이언트에게 합리적인 오류 메시지를 반환하고있습니다.
    - 보안: .env파일 사용과 비밀번호에 해쉬(hash)를 사용해 데이터 보호를 높였습니다.

4. 폴더 구조(Directory Structure)를 역할별로 분리하였다면, 어떤 이점을 가져다 주었을까요?
모듈화와 가독성이 좋습니다. 예를들어 물건 관리는 각 모듈로 분리되어 코드의 모듈화와 유지보수에 좋고, 각 디렉터리내 연관된 파일이 같이있어 코드를 찾고 읽기 쉽습니다.

5. `mongoose`에서 상품 상태는 어떠한 방식으로 관리하였나요? 이 외에도 어떤 방법들이 있었을까요?
mongoose에서 상품 상태를 관리하는 방법은 MongoDB 스키마에서 필드로 정의하는 것이 일반적인데, 예를 들어, Product 스키마에 "status" 필드를 추가하여 각 상품의 상태를 저장할 수 있습니다. 
"status" 필드는 문자열 또는 열거형 값으로 정의할 수 있으며, 예를 들어 "FOR_SALE", "SOLD_OUT" 의 상태를 저장할 수 있습니다.